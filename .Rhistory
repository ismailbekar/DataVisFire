"Kilis", "Kinkkale", "Kirklareli", "Kirsehir", "Kocaeli", "Konya", "Malatya",
"Manisa", "Mardin", "Mersin", "Mugla", "Mus","Nevsehir", "Nigde", "Ordu",
"Osmaniye", "Rize", "Sakarya", "Samsun", "Sanliurfa", "Siirt", "Sinop",
"Sirnak", "Sivas", "Tekirdag", "Tokat", "Trabzon", "Tunceli", "Usak",
"Van","Yalova", "Yozgat", "Zonguldak")
Turkey_il <- spTransform(Turkey_il, "+init=epsg:4326")
proj4string(fire) <- CRS("+init=epsg:4326")
crs(Turkey_il)
crs(fire)
plot(fire, pch= ".")
fire <- raster::intersect(fire, Turkey_il)
plot(fire, pch= ".")
fire
fire@data
coordinates(fire)
fire1 <- read.csv("Data/fire_data.csv")
fire_coord <- coordinates(fire)
fire_coord
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2, max= 0.8, radius= 3)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2, max= 0.8, radius= 3)
fire_coord <- as.tibble(coordinates(fire))
fire_coord <- as.tibble(coordinates(fire))
library(tidyverse)
fire_coord <- as.tibble(coordinates(fire))
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2, max= 0.8, radius= 3)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2, max= 0.8, radius= 8)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2, max= 0.8, radius= 5)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 0.8, radius= 5)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 0.8, radius= 3)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 0.8, radius= 1)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 0.8, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 0.5, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 1, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 10, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 5, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 3, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 2, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 1, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.4, max= 1.5, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 0.7, max= 1.5, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 1, max= 1.5, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2, max= 1.5, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 3, max= 1.5, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2.5, max= 1.5, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2.5, max= 1.5, radius= 5)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2.5, max= 1.5, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2, max= 1.5, radius= 2)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2, max= 1.5, radius= 3)
leaflet(df_Turkey) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(~ Lon, ~ Lat)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(~ Lon, ~ Lat)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addTiles(~ Lon, ~ Lat)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addAwesomeMarkersDependencies(~ Lon, ~ Lat)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addGreatCircles(~ Lon, ~ Lat)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(~ Lon, ~ Lat)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(~ Lon, ~ Lat) %>%
addLegend()
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(~ Lon, ~ Lat)
leaflet(fire_coord) %>%
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2, max= 1.5, radius= 3)
leaflet(fire_coord) %>%
addProviderTiles("Esri.WorldImagery") %>%
addHeatmap(lng= ~Lon, lat= ~Lat,
blur= 2, max= 1.5, radius= 3)
fire <- read.csv("Data/fire_data.csv")
fire <- fire %>% dplyr::select(Il,Ilce,Day, Month, Year, AnaNeden, TaliNeden, Lon, Lat)
coordinates(fire) <- ~Lon + Lat
class(fire)
fire
Turkey_il <- readOGR("Data/Shapefile/TUR_adm1.shp")
Turkey_il$NAME_1 <- c("Canakkale", "Cankiri", "Corum", "Adana", "Adiyaman", "Afyon", "Agri",
"Aksaray", "Amasya", "Ankara", "Antalya", "Ardahan", "Artvin", "Aydin",
"Balikesir", "Bartin", "Batman", "Bayburt", "Bilecik", "Bingol",
"Bitlis", "Bolu", "Burdur", "Bursa", "Duzce", "Denizli", "Diyarbakir",
"Edirne", "Elazig", "Erzincan", "Erzurum", "Eskisehir",
"Gumushane", "Gaziantep", "Giresun", "Hakkari", "Hatay",
"Igdir", "Isparta", "Istanbul", "Izmir", "K. Maras",
"Kutahya", "Karabuk", "Karaman", "Kars", "Kastamonu", "Kayseri",
"Kilis", "Kinkkale", "Kirklareli", "Kirsehir", "Kocaeli", "Konya", "Malatya",
"Manisa", "Mardin", "Mersin", "Mugla", "Mus","Nevsehir", "Nigde", "Ordu",
"Osmaniye", "Rize", "Sakarya", "Samsun", "Sanliurfa", "Siirt", "Sinop",
"Sirnak", "Sivas", "Tekirdag", "Tokat", "Trabzon", "Tunceli", "Usak",
"Van","Yalova", "Yozgat", "Zonguldak")
Turkey_il <- spTransform(Turkey_il, "+init=epsg:4326")
proj4string(fire) <- CRS("+init=epsg:4326")
crs(Turkey_il)
crs(fire)
plot(fire, pch= ".")
fire <- raster::intersect(fire, Turkey_il)
plot(fire, pch= ".")
plot(Turkey_il)
plot(fire, add= TRUE, pch= ".")
fire_coord <- as.tibble(coordinates(fire))
save.image("~/Github/DataVisFire/fire_coord.RData")
load("~/Github/DataVisFire/fire_coord.RData")
setwd("~/GitHub/DataVisFire/")
library(raster)
library(dplyr)
library(ggplot2)
library(rgdal)
fire <- read.csv("Data/fire_data.csv")
fire <- fire %>% dplyr::select(Il,Ilce,Day, Month, Year, AnaNeden, TaliNeden, Lon, Lat)
coordinates(fire) <- ~Lon + Lat
class(fire)
fire
Turkey_il <- readOGR("Data/Shapefile/TUR_adm1.shp")
Turkey_il$NAME_1 <- c("Canakkale", "Cankiri", "Corum", "Adana", "Adiyaman", "Afyon", "Agri",
"Aksaray", "Amasya", "Ankara", "Antalya", "Ardahan", "Artvin", "Aydin",
"Balikesir", "Bartin", "Batman", "Bayburt", "Bilecik", "Bingol",
"Bitlis", "Bolu", "Burdur", "Bursa", "Duzce", "Denizli", "Diyarbakir",
"Edirne", "Elazig", "Erzincan", "Erzurum", "Eskisehir",
"Gumushane", "Gaziantep", "Giresun", "Hakkari", "Hatay",
"Igdir", "Isparta", "Istanbul", "Izmir", "K. Maras",
"Kutahya", "Karabuk", "Karaman", "Kars", "Kastamonu", "Kayseri",
"Kilis", "Kinkkale", "Kirklareli", "Kirsehir", "Kocaeli", "Konya", "Malatya",
"Manisa", "Mardin", "Mersin", "Mugla", "Mus","Nevsehir", "Nigde", "Ordu",
"Osmaniye", "Rize", "Sakarya", "Samsun", "Sanliurfa", "Siirt", "Sinop",
"Sirnak", "Sivas", "Tekirdag", "Tokat", "Trabzon", "Tunceli", "Usak",
"Van","Yalova", "Yozgat", "Zonguldak")
Turkey_il <- spTransform(Turkey_il, "+init=epsg:4326")
proj4string(fire) <- CRS("+init=epsg:4326")
load("~/GitHub/DataVisFire/VisTurkeyFire.RData")
crs(Turkey_il)
crs(fire)
source('~/GitHub/DataVisFire/VisTurkeyFire.R')
crs(Turkey_il)
crs(fire)
fire <- intersect(fire, Turkey_il)
fire <- raster::intersect(fire, Turkey_il)
setwd("~/GitHub/DataVisFire/")
library(raster)
library(dplyr)
library(rgdal)
library(tidyverse)
library(lubridate)
library(here)
install.packages("here")
install.packages("jkmisc")
library(jkmisc)
bird_collisions <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-30/bird_collisions.csv")
plot_data <- bird_collisions %>%
filter(locality == "CHI") %>%
mutate(month = month(date),
year = year(date)) %>%
unite("binomial_name", genus, species, sep = " ") %>%
count(year, month, binomial_name) %>%
complete(nesting(year, binomial_name), month = 1:12, fill = list(n = 0)) %>%
group_by(year, binomial_name) %>%
mutate(percent = n/sum(n)) %>%
mutate(percent = ifelse(is.nan(percent), 0, percent))
flower <- ggplot(plot_data, aes(x = month, y = percent, fill = binomial_name)) +
geom_area(size = 0, position = position_dodge(), alpha = 0.2) +
scale_x_continuous(labels = month.abb, breaks = 1:12) +
scale_y_continuous(limits = c(0,1), breaks = c(0.5, 0.1)) +
scale_fill_viridis_d("Year", option = "plasma", direction = 1) +
scale_color_viridis_d(option = "plasma", direction = 1) +
guides(fill = guide_colorbar()) +
coord_polar() +
labs(x = NULL,
y = NULL,
title = "Overall") +
theme_jk(dark = FALSE, grid = "X", strip_text_size = 10, plot_title_size = 14) +
theme(axis.text = element_blank(),
legend.position = "none")
flower <- ggplot(plot_data, aes(x = month, y = percent, fill = binomial_name)) +
geom_area(size = 0, position = position_dodge(), alpha = 0.2) +
scale_x_continuous(labels = month.abb, breaks = 1:12) +
scale_y_continuous(limits = c(0,1), breaks = c(0.5, 0.1)) +
scale_fill_viridis_d("Year", option = "plasma", direction = 1) +
scale_color_viridis_d(option = "plasma", direction = 1) +
guides(fill = guide_colorbar()) +
coord_polar() +
labs(x = NULL,
y = NULL,
title = "Overall") +
theme_bw(dark = FALSE, grid = "X", strip_text_size = 10, plot_title_size = 14) +
theme(axis.text = element_blank(),
legend.position = "none")
flower <- ggplot(plot_data, aes(x = month, y = percent, fill = binomial_name)) +
geom_area(size = 0, position = position_dodge(), alpha = 0.2) +
scale_x_continuous(labels = month.abb, breaks = 1:12) +
scale_y_continuous(limits = c(0,1), breaks = c(0.5, 0.1)) +
scale_fill_viridis_d("Year", option = "plasma", direction = 1) +
scale_color_viridis_d(option = "plasma", direction = 1) +
guides(fill = guide_colorbar()) +
coord_polar() +
labs(x = NULL,
y = NULL,
title = "Overall") # +
# theme_jk(dark = FALSE, grid = "X", strip_text_size = 10, plot_title_size = 14) +
# theme(axis.text = element_blank(),
#      legend.position = "none")
petals <- flower +
aes(group = year) +
geom_path(aes(color = binomial_name), size = 0.2, show.legend = FALSE) +
labs(title = "By Species") +
facet_wrap(~binomial_name, labeller = label_wrap_gen(10), nrow = 7)
legend <- plot_data %>%
filter(binomial_name == "Setophaga fusca") %>%
ggplot(aes(x = month, y = percent, fill = binomial_name, group = year)) +
geom_area(size = 0, position = position_dodge(), alpha = 0.1) +
geom_path(aes(color = binomial_name), size = 0.2, show.legend = FALSE) +
annotate("text", x = 11, y = 0.8, label = "One year of\ncollisions in October", family = "Scope One", size = 3, hjust = 0) +
annotate("segment", x = 10.8, y = 0.8, xend = 10, yend = 0.8, arrow = arrow(length = unit(0.2, "cm"))) +
annotate("text", x = 3.5, y = 0.8, label = "Multiple years of\ncollisions in May", family = "Scope One", size = 3) +
annotate("segment", x = 3.8, y = 0.8, xend = 5, yend = 0.8, arrow = arrow(length = unit(0.2, "cm"))) +
scale_x_continuous(labels = month.abb, breaks = 1:12) +
scale_y_continuous(limits = c(0,1), breaks = c(0.5, 0.1)) +
scale_fill_viridis_d("Year", option = "plasma", direction = 1) +
scale_color_viridis_d(option = "plasma", direction = 1) +
labs(x = NULL,
y = NULL,
title = "How to Interpret This Chart",
subtitle = str_wrap("A flower represents the recorded total collisions of each bird species with the individual petals representing the normalized events during each year (from 0-1).  The position of the petals indicates the month or months collisions occur, with overlaps indicating repeated year-over-year collisions.", 70)) +
guides(fill = guide_colorbar()) +
coord_polar(theta = "x", start = 0) +
theme_jk(dark = FALSE, grid = "XY", plot_title_size = 14) +
theme(axis.text.y = element_blank(),
legend.position = "none")
legend <- plot_data %>%
filter(binomial_name == "Setophaga fusca") %>%
ggplot(aes(x = month, y = percent, fill = binomial_name, group = year)) +
geom_area(size = 0, position = position_dodge(), alpha = 0.1) +
geom_path(aes(color = binomial_name), size = 0.2, show.legend = FALSE) +
annotate("text", x = 11, y = 0.8, label = "One year of\ncollisions in October", family = "Scope One", size = 3, hjust = 0) +
annotate("segment", x = 10.8, y = 0.8, xend = 10, yend = 0.8, arrow = arrow(length = unit(0.2, "cm"))) +
annotate("text", x = 3.5, y = 0.8, label = "Multiple years of\ncollisions in May", family = "Scope One", size = 3) +
annotate("segment", x = 3.8, y = 0.8, xend = 5, yend = 0.8, arrow = arrow(length = unit(0.2, "cm"))) +
scale_x_continuous(labels = month.abb, breaks = 1:12) +
scale_y_continuous(limits = c(0,1), breaks = c(0.5, 0.1)) +
scale_fill_viridis_d("Year", option = "plasma", direction = 1) +
scale_color_viridis_d(option = "plasma", direction = 1) +
labs(x = NULL,
y = NULL,
title = "How to Interpret This Chart",
subtitle = str_wrap("A flower represents the recorded total collisions of each bird species with the individual petals representing the normalized events during each year (from 0-1).  The position of the petals indicates the month or months collisions occur, with overlaps indicating repeated year-over-year collisions.", 70)) +
guides(fill = guide_colorbar()) +
coord_polar(theta = "x", start = 0) # +
out <- wrap_plots(flower / legend, petals, ncol = 2, widths = c(1, 2)) +
plot_annotation(title = "Seasonality of Bird Collisions in Chicago",
subtitle = str_wrap("Presented below is a petal chart of of bird collisions, with instructions on how to interpret this chart in the lower left.  The upper left flower represents collisions recorded across all years and species, with individual species presented as small multiple flowers on the right.", 220),
caption = "Data: Winger et al. (2019) Nocturnal flight-calling behaviour predicts vulnerability to artificial light in migratory birds. Proceedings of the Royal Society B 286(1900): 20190364. https://doi.org/10.1098/rspb.2019.0364 | Graphic: @jakekaupp",
theme = theme_jk())
devtools::install_github("thomasp85/patchwork")
library(patchwork)
out <- wrap_plots(flower / legend, petals, ncol = 2, widths = c(1, 2)) +
plot_annotation(title = "Seasonality of Bird Collisions in Chicago",
subtitle = str_wrap("Presented below is a petal chart of of bird collisions, with instructions on how to interpret this chart in the lower left.  The upper left flower represents collisions recorded across all years and species, with individual species presented as small multiple flowers on the right.", 220),
caption = "Data: Winger et al. (2019) Nocturnal flight-calling behaviour predicts vulnerability to artificial light in migratory birds. Proceedings of the Royal Society B 286(1900): 20190364. https://doi.org/10.1098/rspb.2019.0364 | Graphic: @jakekaupp",
theme = theme_jk())
out <- wrap_plots(flower / legend, petals, ncol = 2, widths = c(1, 2)) +
plot_annotation(title = "Seasonality of Bird Collisions in Chicago",
subtitle = str_wrap("Presented below is a petal chart of of bird collisions, with instructions on how to interpret this chart in the lower left.  The upper left flower represents collisions recorded across all years and species, with individual species presented as small multiple flowers on the right.", 220),
caption = "Data: Winger et al. (2019) Nocturnal flight-calling behaviour predicts vulnerability to artificial light in migratory birds. Proceedings of the Royal Society B 286(1900): 20190364. https://doi.org/10.1098/rspb.2019.0364 | Graphic: @jakekaupp",
#theme = theme_jk())
)
out
ggsave(here("2019","week18", "tw18_plot.png"), out, width = 16, height = 10, type = "cairo")
flower
petals
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("lintr")
install.packages("sf")
install.packages("viridis")
install.packages("cowplot")
install.packages("rvest")
devtools::install_github("hrbrmstr/albersusa")
library(rstudioapi)
library(tidyverse)
library(magrittr)
library(lintr)
library(sf)
library(raster)
library(viridis)
library(cowplot)
library(rvest)
library(albersusa)
### Cleaning
# I wanted to try a spatial plot this week. The dataset provided would need some rearranging for this to work.
# The first thing I did was look for infomation on how busy each airport in the US is.
# From this I can gather a really rough estimate of the amount of flights and aggregate this acrosss each state.
# I then can compare this to the number of bird strike incidents.
# Airport data taken from tables found in https://en.wikipedia.org/wiki/List_of_the_busiest_airports_in_the_United_States
airport_data <-
read_html(
"https://en.wikipedia.org/wiki/List_of_the_busiest_airports_in_the_United_States"
)
# The tables came in two parts with slightly different headings so I extracted them, cleaned and join them together
# Used rvest to import the table and the chrome extension SelectorGadget to obtain the xpath's
ad1 <- airport_data %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
ad1_clean <- ad1 %>%
dplyr::select("State", "2017[3]", "2016[4]", "2015[5]", "2014[6]") %>%
rename(
"state" = "State",
"2017" = "2017[3]",
"2016" = "2016[4]",
"2015" = "2015[5]",
"2014" = "2014[6]"
)
airport_data <-
read_html(
"https://en.wikipedia.org/wiki/List_of_the_busiest_airports_in_the_United_States"
)
# The tables came in two parts with slightly different headings so I extracted them, cleaned and join them together
# Used rvest to import the table and the chrome extension SelectorGadget to obtain the xpath's
ad1 <- airport_data %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
ad1_clean <- ad1 %>%
dplyr::select("State", "2017[3]", "2016[4]", "2015[5]", "2014[6]") %>%
rename(
"state" = "State",
"2017" = "2017[3]",
"2016" = "2016[4]",
"2015" = "2015[5]",
"2014" = "2014[6]"
)
View(ad1)
ad1_clean <- ad1 %>%
dplyr::select("State", "2017[4]", "2016[4]", "2015[5]", "2014[6]") %>%
rename(
"state" = "State",
"2017" = "2017[4]",
"2016" = "2016[4]",
"2015" = "2015[5]",
"2014" = "2014[6]"
)
View(ad1)
ad1_clean <- ad1 %>%
dplyr::select("State", "2017[4]", "2016[5]", "2015[6]", "2014[7]") %>%
rename(
"state" = "State",
"2017" = "2017[4]",
"2016" = "2016[5]",
"2015" = "2015[6]",
"2014" = "2014[7]"
)
ad2 <- airport_data %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[2]') %>%
html_table()
ad2_clean <- ad2 %>%
dplyr::select(-"IATACode",-"2018",-"Airports (Medium Hubs)",-"City Served",-"Rank(2017)") %>%
rename("state" = "State",
"2015" = "2015[4]",
"2014" = "2014[1]")
ad2_clean <- ad2 %>%
dplyr::select(-"IATACode",-"2018",-"Airports (Medium Hubs)",-"City Served",-"Rank(2017)") %>%
rename("state" = "State",
"2015" = "2015[6]",
"2014" = "2014[7]")
ad2_clean <- ad2 %>%
dplyr::select(-"IATACode",-"2018",-"Airports (Medium Hubs)",-"City Served",-"Rank(2017)") %>%
rename("state" = "State")
## A horriblly unclean way to convert these to numeric and remove commas but it was the only one I found to work of the top of my head
ad1_clean$`2017` <- as.numeric(gsub(",", "", ad1_clean$`2017`))
ad1_clean$`2016` <- as.numeric(gsub(",", "", ad1_clean$`2016`))
ad1_clean$`2015` <- as.numeric(gsub(",", "", ad1_clean$`2015`))
ad1_clean$`2014` <- as.numeric(gsub(",", "", ad1_clean$`2014`))
ad2_clean$`2017` <- as.numeric(gsub(",", "", ad2_clean$`2017`))
ad2_clean$`2016` <- as.numeric(gsub(",", "", ad2_clean$`2016`))
ad2_clean$`2015` <- as.numeric(gsub(",", "", ad2_clean$`2015`))
ad2_clean$`2014` <- as.numeric(gsub(",", "", ad2_clean$`2014`))
passangers <- rbind(ad1_clean, ad2_clean)
View(ad1_clean)
View(ad2)
View(ad2_clean)
View(ad2)
View(ad2)
ad2_clean <- ad2 %>%
dplyr::select(-"IATACode",-"2018",-"Airports (Medium Hubs)",-"City Served",-"Rank(2017)") %>%
rename("state" = "State",
"2015" = "2015[5]",
"2014" = "2014[1]")
## A horriblly unclean way to convert these to numeric and remove commas but it was the only one I found to work of the top of my head
ad1_clean$`2017` <- as.numeric(gsub(",", "", ad1_clean$`2017`))
ad1_clean$`2016` <- as.numeric(gsub(",", "", ad1_clean$`2016`))
ad1_clean$`2015` <- as.numeric(gsub(",", "", ad1_clean$`2015`))
ad1_clean$`2014` <- as.numeric(gsub(",", "", ad1_clean$`2014`))
ad2_clean$`2017` <- as.numeric(gsub(",", "", ad2_clean$`2017`))
ad2_clean$`2016` <- as.numeric(gsub(",", "", ad2_clean$`2016`))
ad2_clean$`2015` <- as.numeric(gsub(",", "", ad2_clean$`2015`))
ad2_clean$`2014` <- as.numeric(gsub(",", "", ad2_clean$`2014`))
passangers <- rbind(ad1_clean, ad2_clean)
passangers <- passangers %>%
mutate(mean_pass = rowMeans(dplyr::select(passangers, -state))) %>%
dplyr::select(state, mean_pass) %>%
group_by(state) %>%
summarise(mean_pass = sum(mean_pass)) %>% #calculating an average passanger count across 2017:2014
mutate(state = recode(state, "OH/KY" = "KY")) #for the purposes of the analysis it is easier to break these up
# Bird data
bird_impacts <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-07-23/wildlife_impacts.csv")
bird_trim <- bird_impacts %>%
dplyr::select("state", "incident_year") %>%
filter(
incident_year == 2017 |
incident_year == 2016 |
incident_year == 2015 |
incident_year == 2014
) %>% #used the same years as the passanger dataset
group_by(state) %>%
summarise(incidents = sum(n()))
# Joining the two datasets
us_counties <-
usa_sf(proj = c("longlat", "laea", "lcc", "eqdc", "aeqd"))
pas_bird <- merge(passangers, bird_trim, by = "state")
# as each state doesnt have spatial components I used https://geocode.localfocus.nl/ to obtain these as a csv. file "states"
states <-
read.csv("state.csv", header = TRUE, stringsAsFactors = FALSE)
View(us_counties)
usa_strikes <- merge(pas_bird, states, by = "state")
usa_strikes_fips <- usa_strikes %>%
st_as_sf(crs = 4326, coords = c("long", "lat"))
